* ---------- TEMPLATE_vco_ring.cir.j2 ----------
.title VCO Ring (behavioral) â€” EE5295

* Parameters coming from CSV
{% for k, v in params.items() %}.param {{k}}={{v}}
{% endfor %}

* Defaults if not provided
.param VDD={{ VDD | default(1.2) }}
.param VCTRL={{ VCTRL | default(0.6) }}
.param GAIN={{ GAIN | default(3) }}
.param R0={{ R0 | default(5k) }}
.param ALPHA={{ ALPHA | default(1.0) }}
.param C0={{ C0 | default(100f) }}
.param VBIAS={{ VBIAS | default(0.6) }}
.param THRESH={{ THRESH | default(0.5) }}
.param TSTOP={{ TSTOP | default(20u) }}
.param TSTEP={{ TSTEP | default(1n) }}
.param TSTART={{ TSTART | default(5u) }}

VDD vdd 0 {VDD}
VCTRL ctrl 0 {VCTRL}

* ---------- One stage macro (behavioral inverter + RC) ----------
* Nodes: in  out_rc  ctrl  vdd
* out (hard-limited via tanh) -> RC low-pass -> out_rc (goes to next stage)
.func R_eff(x) { R0/(1+ALPHA*(x - VBIAS)) }
.func R_eff_limited(x) { limit(R_eff(x), 100, 1e9) }

.subckt STAGE IN OUTRC CTRL VDD
* Hard-limited inverter output between 0..VDD
BOUT OUT 0 V = V(VDD)*tanh(GAIN*(V(IN)/V(VDD)-0.5))*-1 + 0.5*V(VDD)

* First-order low-pass with voltage-controlled conductance
GRC OUTRC 0 value = ( V(OUT) - V(OUTRC) ) / R_eff_limited( V(CTRL) )
CLOAD OUTRC 0 {C0}
.ends STAGE

* ---------- 3-stage ring ----------
X1 n1 n2 ctrl vdd STAGE
X2 n2 n3 ctrl vdd STAGE
X3 n3 n1 ctrl vdd STAGE

* Probes
.save v(n1) v(n2) v(n3) v(ctrl) v(vdd)

* Analyses
.tran {TSTEP} {TSTOP} {TSTART}
* Measure frequency at node n1
.measure tran PER TRIG v(n1) VAL={THRESH} RISE=10 TARG v(n1) VAL={THRESH} RISE=11
.measure tran FREQ param = 1/PER

.print tran format=csv v(n1) v(n2) v(n3) > {{ results_tran_csv | default("vco_tran.csv") }}

.end
